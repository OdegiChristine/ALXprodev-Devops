#!/bin/bash

# List of Pokémon
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Output directory
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

# Error log
ERROR_FILE="errors.txt"
> "$ERROR_FILE"

# Store PIDs
PIDS=()

# Function to fetch Pokémon data
fetch_pokemon() {
    local POKEMON=$1
    local API_URL="https://pokeapi.co/api/v2/pokemon/$POKEMON"
    local OUTPUT_FILE="$OUTPUT_DIR/$POKEMON.json"

    echo "Fetching data for $POKEMON..."

    ATTEMPT=1
    SUCCESS=false

    while [ $ATTEMPT -le 3 ]; do
        STATUS_CODE=$(curl -s -o "$OUTPUT_FILE" -w "%{http_code}" "$API_URL")

        if [ "$STATUS_CODE" -eq 200 ]; then
            echo "Saved data to $OUTPUT_FILE ✅"
            SUCCESS=true
            break
        else
            echo "Attempt $ATTEMPT for $POKEMON failed (status: $STATUS_CODE). Retrying..."
            sleep 1
        fi
        ATTEMPT=$((ATTEMPT + 1))
    done

    if [ "$SUCCESS" = false ]; then
        echo "Error: Failed to fetch $POKEMON after 3 attempts" >> "$ERROR_FILE"
    fi
}

# Start background jobs
for POKEMON in "${POKEMONS[@]}"; do
    fetch_pokemon "$POKEMON" &
    PIDS+=($!)  # store PID
done

# Monitor jobs
for PID in "${PIDS[@]}"; do
    if ! wait "$PID"; then
        echo "Process $PID failed, killing remaining jobs..."
        kill "${PIDS[@]}" 2>/dev/null
        break
    fi
done

# Show remaining jobs (should be none)
jobs

echo "All fetch operations complete."
